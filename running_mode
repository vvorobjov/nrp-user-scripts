
#!/bin/bash
# A script to enable or disable oidc

mode=$1
no_restart=$2 # makes sure nginx is not started on *dev servers* when running_mode is used
needs_source=0
if [[ -z $mode ]]; then
  echo "2. Offline mode -- Disable OIDC and use your local machine as backend and storage"
  if [ "$NRP_INSTALL_MODE" != "user" ]; then
    echo "3. Local Collab mode -- Enable OIDC and use your local machine as backend with collab-support services"
    echo "4. Mixed Collab mode -- OIDC authentication and local storage."
  fi
  echo "5. Offline mode with localhost replaced by local IP -- Disable OIDC and use your local machine as backend and storage"

  echo
  echo "Specify the additional 'no_restart' option if you want nginx not to be restarted"
  read mode
fi

function enableFrontendOIDC {
  echo "Editing Frontend config.js"
  ln -s "$HBP"/nrp-user-scripts/config_files/nrp-frontend/config.js.oidc "$HBP"/nrp-frontend/src/config.js.oidc
  cp "$HBP"/nrp-frontend/src/config.js.oidc "$HBP"/nrp-frontend/public/config.js
  if [ -d "$HBP"/nrp-frontend/build ]; then
    cp "$HBP"/nrp-frontend/src/config.js.oidc "$HBP"/nrp-frontend/build/config.js
  fi
}

function enableNginxOIDC {
  echo "Editing nginx conf files"
  cp "$HBP"/admin-scripts/ansible/roles/run_frontend/files/nginx_frontend.conf $HOME/.local/etc/nginx/conf.d/frontend.conf
  cp "$HBP"/admin-scripts/ansible/roles/run_backend/files/nrp-services.conf $HOME/.local/etc/nginx/conf.d/nrp-services.conf
  sed -e 's|<HBP>|'"$HBP"'|' -i $HOME/.local/etc/nginx/conf.d/nrp-services.conf
  sed -e 's/<username>/'"$USER"'/' -i $HOME/.local/etc/nginx/conf.d/nrp-services.conf

  sed -e 's|<HBP>|'"$HBP"'|' -i $HOME/.local/etc/nginx/conf.d/frontend.conf

  cp -r $HBP/admin-scripts/ansible/roles/run_backend/files/lua/* $HOME/.local/etc/nginx/lua
}

function disableFrontendOIDC {
  echo "Editing Frontend config.js"
  ln -s "$HBP"/nrp-user-scripts/config_files/nrp-frontend/config.js.local "$HBP"/nrp-frontend/src/config.js.local
  cp "$HBP"/nrp-frontend/src/config.js.local "$HBP"/nrp-frontend/public/config.js
  if [ -d $HBP/nrp-frontend/build ]; then
    cp "$HBP"/nrp-frontend/src/config.js.local "$HBP"/nrp-frontend/build/config.js
  fi
}

function disableNginxOIDC {
  echo "Editing nginx conf files"
  cd ~/.local/etc/nginx/conf.d
  sed -e '/access_by_lua_file/ s/^#*/#/' -i nrp-services.conf
  sed -e '/_access_token/, +2 s/^#*/#/' -i nrp-services.conf
  sed -e '/_userinfo/, +2 s/^#*/#/' -i nrp-services.conf
}

function proxyUseLocalhostCollab {
  echo "Using the proxy config file containing your localhost as backend, and the Collab as storage"
  cd $HBP/nrp-proxy
  if [ -f config.json ]; then
    rm config.json
  fi
  cp $HBP/admin-scripts/config_files/nrp-proxy/config.json.local config.json
  sed -e '/storage/ s/FS/Collab/' -i config.json
  sed -e '/authentication/ s/FS/Collab/' -i config.json
}

function proxyUseLocalhostCollabAuthFsStorage {
  echo "Configuring proxyto use localhost as backend, the Collab as authentication and FS as storage"
  cd $HBP/nrp-proxy
  if [ -f config.json ]; then
    rm config.json
  fi
  cp $HBP/admin-scripts/config_files/nrp-proxy/config.json.local config.json
  sed -e '/storage/ s/Collab/FS/' -i config.json
  sed -e '/authentication/ s/FS/Collab/' -i config.json
}

function proxyUseLocalhostFS {
  echo "Using the proxy config file containing your localhost as backend, and your FS as storage"
  cd $HBP/nrp-proxy
  if [ -f config.json ]; then
    rm config.json
  fi
  cp config.json.local config.json
  sed -e '/storage/ s/Collab/FS/' -i config.json
  sed -e '/authentication/ s/Collab/FS/' -i config.json
}

function enableCollabSupport {
  echo "Enabling authentication in local proxy config for collab support"
  cd $HBP/nrp-proxy
  sed -e '/deactivate/ s/true/false/' -i config.json
}

function disableCollabSupport {
  cd $HBP/nrp-proxy
  sed -e '/deactivate/ s/false/true/' -i config.json
}

function replaceLocalhostByIP {
  frontend_config=$HBP/nrp-frontend/public/config.js
  proxy_config=$HBP/nrp-proxy/config.json
  sed -i "s/http:\/\/localhost/http:\/\/$local_host/g" $frontend_config $proxy_config
  sed -i "s/ws:\/\/localhost/ws:\/\/$local_host/g" $frontend_config $proxy_config
}

function ensureNoVPN {
  vpn=$(ifconfig | grep 'vpn0');
  test -n "$vpn" && { echo ERROR you are connected to a VPN; exit 1; }
}

chosenIP=0
function testIPs {
  IFS=' ' read -ra IPs <<< $(hostname -I)
  if [[ ${#IPs[@]} > 1 ]]; then
    count=0
    echo "more than one possible IP:"
    for i in "${IPs[@]}"; do
      echo "$count) $i"
      ((count++))
    done
    read chosenIP
  fi
  local_host=${IPs[chosenIP]}
  echo "Configuring IP to $local_host"
}

if [ "$NRP_INSTALL_MODE" == "user" ]; then
  if [ "$mode" == "3" ] || [ "$mode" == "4" ]; then
    RED="\033[01;31m"
    NC="\033[00m"
    echo -e "${RED}Sorry you need to be in developer mode to run options 3 or 4. ${NC}"
    exit
  fi
fi

case $mode in
2)
  disableFrontendOIDC
  disableNginxOIDC
  proxyUseLocalhostFS
  disableCollabSupport
  ;;
3)
  enableFrontendOIDC
  enableNginxOIDC
  proxyUseLocalhostCollab
  enableCollabSupport
  ;;
4)
  enableFrontendOIDC
  enableNginxOIDC
  proxyUseLocalhostCollabAuthFsStorage
  enableCollabSupport
  ;;
5)
  ensureNoVPN
  testIPs
  disableFrontendOIDC
  disableNginxOIDC
  proxyUseLocalhostFS
  disableCollabSupport
  replaceLocalhostByIP
  ;;
esac


if [ -z $no_restart ] || [ "$no_restart" != "no_restart" ]; then
  $HOME/.local/etc/init.d/nginx restart
fi

if [ $needs_source -eq 1 ]; then
  echo "===================== IMPORTANT ====================="
  echo "======= Remember to source your .bashrc file! ======="
  echo "====================================================="
fi
echo "Done"
