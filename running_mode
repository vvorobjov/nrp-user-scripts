#!/bin/bash
# A script to enable or disable oidc

mode=$1
needs_source=0

if [[ -z $mode ]]; then
  echo "1. EPFL mode -- Enable OIDC and use dev. servers as backends"
  echo "2. Offline mode -- Disable OIDC and use your local machine as backend"
  echo "3. Local Collab mode -- Enable OIDC and use your local machine as backend with collab-support services"
  read mode
fi

function enableFrontendOIDC {
  echo "Editing Frontend config.json"
  cd $HBP/ExDFrontend/app
  sed -e '/ensureToken/ s/false/true/' -i config.json
  sed -e '/forceuser/ s/true/false/' -i config.json
}

function enableBackendOIDC {
  echo "Editing Backend config.json"
  cd $HBP/ExDBackend/hbp-flask-restful-swagger-master/flask_restful_swagger/static
  sed -e '/deactivate/ s/true/false/' -i config.json
}

function enableNginxOIDC {
  echo "Editing nginx conf files"
  cd ~/.local/etc/nginx/conf.d
  sed -e '/access_by_lua_file/ s/^#*//#/' -i nrp-services.conf
  sed -e '/_access_token/, +2 s/^#*//#/' -i nrp-services.conf
  sed -e '/_userinfo/, +2 s/^#*//#/' -i nrp-services.conf
}

function proxyUseDevServers {
  echo "Using the proxy config file containing the dev. servers as backends"
  cd $HBP/nrpBackendProxy
  if [ -f config.json ]; then
    rm config.json
  fi
  cp config.json.sample config.json
}

function disableFrontendOIDC {
  echo "Editing Frontend config.json"
  cd $HBP/ExDFrontend/app
  sed -e '/ensureToken/ s/true/false/' -i config.json
  sed -e '/forceuser/ s/false/true/' -i config.json
}

function disableBackendOIDC {
  echo "Editing Backend config.json"
  cd $HBP/ExDBackend/hbp-flask-restful-swagger-master/flask_restful_swagger/static
  sed -e '/deactivate/ s/false/true/' -i config.json
}

function disableNginxOIDC {
  echo "Editing nginx conf files"
  cd ~/.local/etc/nginx/conf.d
  sed -e '/access_by_lua_file/ s/^#*/#/' -i nrp-services.conf
  sed -e '/_access_token/, +2 s/^#*/#/' -i nrp-services.conf
  sed -e '/_userinfo/, +2 s/^#*/#/' -i nrp-services.conf
}

function proxyUseLocalhost {
  echo "Using the proxy config file containing your localhost as backend"
  cd $HBP/nrpBackendProxy
  if [ -f config.json ]; then
    rm config.json
  fi
  cp config.json.sample.local config.json
}

function enableCollabSupport {
  if ! grep -q APP_SETTINGS=config.LocalConfig "$HOME/.bashrc"; then
    echo "Editing the APP_SETTINGS variable"
    needs_source=1
    if grep -q APP_SETTINGS "$HOME/.bashrc"; then
      sed -e '/export APP_SETTINGS/ s/NoDBConfig/LocalConfig/' -i $HOME/.bashrc
    else
      sed -e "\$aexport APP_SETTINGS=config.LocalConfig" -i $HOME/.bashrc
    fi
  fi
  echo "Enabling authentication in local proxy config for collab support"
  cd $HBP/nrpBackendProxy
  sed -e '/deactivate/ s/true/false/' -i config.json
}

function disableCollabSupport {
  if ! grep -q APP_SETTINGS=config.NoDBConfig "$HOME/.bashrc"; then
    echo "Editing the APP_SETTINGS variable"
    needs_source=1
    if grep -q APP_SETTINGS "$HOME/.bashrc"; then
      sed -e '/export APP_SETTINGS/ s/LocalConfig/NoDBConfig/' -i $HOME/.bashrc
    else
      sed -e "\$aexport APP_SETTINGS=config.NoDBConfig" -i $HOME/.bashrc
    fi
  fi
}

if [ $mode -eq 1 ]; then
  enableFrontendOIDC
  proxyUseDevServers

elif [ $mode -eq 2 ]; then
  disableFrontendOIDC
  disableBackendOIDC
  disableNginxOIDC
  proxyUseLocalhost
  disableCollabSupport

elif [ $mode -eq 3 ]; then
  enableFrontendOIDC
  enableBackendOIDC
  enableNginxOIDC
  proxyUseLocalhost
  enableCollabSupport

fi

$HOME/.local/etc/init.d/nginx restart
if [ $needs_source -eq 1 ]; then
  echo "===================== IMPORTANT ====================="
  echo "======= Remember to source your .bashrc file! ======="
  echo "====================================================="
fi
echo "Done"
