# These variables can be included in the .bashrc before starting the installation process

if [ -n "$PYTHONPATH" ]; then
printf "\033[1;31m+-------------------------- Neurorobotics Platform warning ---------------------------+\n"
printf "| Dear Neurorobotics user, your PYTHONPATH contains previous paths.                   |\n"
printf "| This might cause the Neurorobotics Platform to malfunction.                         |\n"
printf "| If you are experiencing problems (like MPI.so not finding function references), add |\n"
printf "|   export PYTHONPATH=                                                                |\n"
printf "| to your ~/.bashrc                                                                   |\n"
printf "+-------------------------------------------------------------------------------------+\033[0m\n"
fi

SUPPORTED_SHELLS=("sh" "bash" "zsh")

# Extract shell type from process name

CURR_SHELL=$(basename $(ps -p $$ --no-headers -o comm))

# Check if extracted shell type matches any of supported shells

SUPPORTED_SHELL=""
for value in "${SUPPORTED_SHELLS[@]}"
do
    [ "$CURR_SHELL" = "$value" ] && SUPPORTED_SHELL="yes"
done

if [ -z "$SUPPORTED_SHELL" ]
then
    # Shell type couldn't be determined from process name, use heuristics

    if [ -n "$BASH" ]
    then
        CURR_SHELL="bash"
    elif [ -n "$ZSH_NAME" ]
    then
        CURR_SHELL="zsh"
    else
        >&2 echo "WARNING: Unknown shell '$CURR_SHELL', falling back to 'sh' for ROS setup"
        CURR_SHELL="sh"
    fi
fi

export PYTHON_VERSION_MAJOR=$(python -c "import sys; print(sys.version_info.major)")
export PYTHON_VERSION_MAJOR_MINOR=$(python -c "import sys; print('{}.{}'.format(sys.version_info.major, sys.version_info.minor))")

if [[ $PYTHON_VERSION_MAJOR -lt 3 ]]; then
    UWSGI_PLUGIN="python"
else
    UWSGI_PLUGIN="python3"
fi

## ROS variables
#source /opt/ros/noetic/setup.$CURR_SHELL
#
#export ROS_PARALLEL_JOBS=-j4
#export ROS_IP=127.0.0.1
#
## Gazebox64 libs
#source $HOME/.local/share/gazebo/setup.sh
#export LD_LIBRARY_PATH=$HOME/.local/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
#export CMAKE_PREFIX_PATH=$HOME/.local/lib/x86_64-linux-gnu/cmake/gazebo/:$CMAKE_PREFIX_PATH
#export IGN_IP=127.0.0.1

# NRP virtual env
export NRP_VIRTUAL_ENV=$HOME/.opt/platform_venv
export VIRTUAL_ENV=$NRP_VIRTUAL_ENV
# NOTE the usage of the $VIRTUAL_ENV:
# The make target `devinstall` installs NRP Python modules to VIRTUAL_ENV virtual environment.
# One can change the $VIRTUAL_ENV for his/her own puproses,
# but the NRP installation scripts and guides expect to find the artifacts at $NRP_VIRTUAL_ENV
# Note as well, that if you activate and then deactivate virtual environment (even another one),
# then the $VIRTUAL_ENV is unset and no longer available before you define it again.
# Please, keep in mind the value of $VIRTUAL_ENV at different steps of installation/operation.

if [ -z "$HBP" ]; then
  echo "Your HBP variable is not set!"
  echo "Please, set it up:"
  echo "export HBP=<path with nrp-core repository folder>"
  exit 1
fi

# HBP nrp-backend
export PYTHONPATH=$PYTHONPATH:$HBP/nrp-backend/hbp_nrp_backend:$HBP/nrp-backend/hbp_nrp_simserver:$HBP/nrp-backend/hbp_nrp_commons

# HBP models directory
export NRP_MODELS_DIRECTORY=$HBP/Models
# export NRP_EXPERIMENTS_DIRECTORY=$HBP/Experiments
export NRP_SIMULATION_DIR=/tmp/nrp-simulation-dir

# HPB models for gazebo
export GAZEBO_MODEL_PATH=$NRP_SIMULATION_DIR/assets:$HOME/.gazebo/models:$GAZEBO_MODEL_PATH

# NRP local storage path
export STORAGE_PATH=$HOME/.opt/nrpStorage

# General NRP
export NRP_USER=$USER

# User scripts
export PATH=$HBP/nrp-user-scripts:$PATH

# General paths
#export PATH=$HOME/.local/bin:$PATH
#export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH
#export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH
#export MANPATH=$HOME/.local/share/man:$MANPATH
#export C_INCLUDE_PATH=$HOME/.local/include:$C_INCLUDE_PATH
#export CPLUS_INCLUDE_PATH=$HOME/.local/include:$CPLUS_INCLUDE_PATH
#export CPATH=$HOME/.local/include:$CPATH

# Make number of make processes user-configurable
#if [ -z "$NRP_NUM_CORES" ]; then
#    export NRP_NUM_MAKE_PROCESSES=$(nproc)
#else
#    export NRP_NUM_MAKE_PROCESSES=$NRP_NUM_CORES
#fi
# This stops the npm notice processes from being spawned
export NO_UPDATE_NOTIFIER=1
# This loads nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
