#!/bin/bash
# This script gives many NRP updating options to users

source "$HBP"/user-scripts/nrp_functions || { echo ERROR; exit 1; }

# Python2.7 compatible branch in NRP 3.1
python2_branches=("master18" "master16")

# Available commands
commands=("help" "rebase" "build" "update" "itmaster" "gitclean")

function is_in () {
  #######################################
  # Checks whether <item> is in <array>.
  # USAGE: is_in <item> <array>
  # ARGUMENTS:
  #   item
  #   array
  # RETURN:
  #   0 if item is in array, 1 otherwise.
  #######################################
  local item=$1
  shift

  local array_string="$@"
  [[ " $array_string " =~ " $item " ]]
}

function exit_with_message () {
  #######################################
  # Prints a interpolated string and exits.
  #
  # USAGE: exit_with_message <format_string> <strings_array>
  # ARGUMENTS:
  #   format_string
  #   strings_array
  # OUTPUTS:
  #   Write the interpolated string to stdout
  # RETURN:
  #   1
  #######################################

  local template=$1
  shift
  printf -v interpolated_str "$template" "$@"

  printf '%s\n' "$interpolated_str" >&2
  exit 1
}

function branch_is_valid () {
  #######################################
  # Checks whether a <branch> is compatible
  # with the Python version in use.
  # USAGE: branch_is_valid <branch>
  # GLOBALS:
  #   python2_branches array
  #   PYTHON_VERSION_MAJOR integer
  # ARGUMENTS:
  #   branch to check
  # RETURN:
  #   0 branch is valid, 1 otherwise.
  #######################################

  local branch_name="$1"

  local is_branch_python2_compatible=false
  is_in "$branch_name" "${python2_branches[@]}" && is_branch_python2_compatible=true

  local using_python2=false
  [[ "$PYTHON_VERSION_MAJOR" -lt 3 ]] && using_python2=true

  if $using_python2 ; then
    $is_branch_python2_compatible
  else
    ! $is_branch_python2_compatible
  fi

}

function help () {
  echo
  if [ "$NRP_INSTALL_MODE" != "user" ]; then
    echo "Usage: "$(basename $0)" <command> [--all] [--spiking-cerebellum] [--branch=<branch_name>]"
    echo
    echo "  If '--branch' is not provided, <branch_name> defaults to development"
  else
    echo "Usage: "$(basename $0)" <command> [--all] [--spiking-cerebellum]"
    echo
  fi
  echo "  If '--all' is provided, include 3rd party repos (gazebo, opensim, nest, ...)"
  echo "  If '--spiking-cerebellum' is provided with 'build', build NEST/SpikingCerebellum"
  echo "  Available commands:"
  echo "    help    : Print this message"
  echo "    rebase  : Switch repos to master and rebase"
  echo "    build   : Build all buildable repos (except 3rd party)"
  echo "    update  : Run rebase followed by build"
  echo "              You will be prompted to run configure_nrp"
  echo "    itmaster: Rebases your NRP and create a clean IT branch in each repo"
  echo "    gitclean: Removes all local branches except master and development"
}

# parse command
if [ $# -lt 1 ]; then
  help
  exit 1
fi
command="$1"
shift

# validate command
if ! is_in "$command" "${commands[@]}"; then
  help
  exit 1
fi

# define arguments variables with defaults
all="no"
spiking_cerebellum_option="no-spiking-cerebellum"

# parse arguments
while :; do

  case $1 in
  --all)
    all="all"
    ;;
  --spiking-cerebellum)
    spiking_cerebellum_option="spiking-cerebellum"
    ;;
  --branch=*)
    branch_name="${1#*=}"
    shift
    ;;
  *)
    break
    ;;
  esac

  shift
done

[ -z $branch_name ] && branch_name="development" # default to development
# validate branch: check whether is compatible with the Python version in use
if ! branch_is_valid "$branch_name"; then
  exit_with_message 'ERROR: "%s" branch is not compatible with Python %s' "$branch_name" "$PYTHON_VERSION_MAJOR"
fi

# execute command
case "$command" in
"rebase")
  nrp_rebase $all $branch_name
  ;;
"build")
  nrp_build $all $spiking_cerebellum_option
  ;;
"update")
  nrp_rebase $all $branch_name
  echo
  echo "-------------------------------------------------------------------------------------"
  echo "Running a first pass of nrp_configure. Just let run and don't answer questions so far"
  echo "-------------------------------------------------------------------------------------"
  echo
  sleep 3
  nrp_configure
  nrp_build $all $spiking_cerebellum_option
  echo
  echo "----------------------------"
  echo "Second pass of nrp_configure"
  echo "----------------------------"
  echo
  sleep 2
  nrp_configure
  ;;
"itmaster")
  nrp_rebase $all $branch_name
  it_branch $all
  ;;
"gitclean")
  clean_branches $all
  ;;
*)
  help
  ;;
esac
