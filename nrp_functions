#!/bin/bash
# This script holds common functions

PIP_CMD="python3 -m pip"

source "$HBP"/nrp-user-scripts/nrp_variables || { echo ERROR; exit 1; }
source "$HBP"/nrp-user-scripts/nrp_aliases || { echo ERROR; exit 1; }

#function build_gzweb {
#  echo
#  echo -------------------------
#  echo gzweb
#  echo -------------------------
#  sleep 2
#  cd "$HBP"/gzweb || { echo ERROR: "$HBP"/gzweb NOT FOUND. You might want to run the clone-all-repos script to get this repo; exit 1; }
#  ./deploy-gzbridge-nrp.sh || { echo GZBRIDGE BUILD ERROR; exit 1; }
#  # Dedupe helps prevents known issue "npm ERR! enoent ENOENT: no such file or directory, rename"
#  # For more information see: https://github.com/zurb/foundation-sites/issues/10826
#  npm dedupe || { echo  GZWEB INSTALL ERROR; exit 1; }
#  git checkout -- package.json
#  npm install --no-save || { echo GZBRIDGE INSTALL ERROR; exit 1; }
#  cd gz3d/utils || { echo gz3d/utils ERROR: DIRECTORY NOT FOUND; exit 1; }
#  npm dedupe || { echo  GZ3D INSTALL ERROR; exit 1; }
#  git checkout -- package.json
#  npm install --no-save || { echo GZ3D INSTALL ERROR; exit 1; }
#}

function nrp_rebase {
  rebase_all=$1
  rebase_branch=$2

  cd "$HBP" || { echo ERROR; exit 1; }
  source "$HBP"/nrp-user-scripts/repos.txt || { echo ERROR; exit 1; }

  printf '\n=====================================\n'
  printf 'Rebasing repos (branch %s)\n' "$rebase_branch"
  printf '=====================================\n'
  if [ "$rebase_all" = "all" ]
  then
    repos=(
    ${nrp_repos[*]}
  )
  else
    repos=(
      ${nrp_repos[*]}
    )
  fi

  # developer installation repos
  if [ "$NRP_INSTALL_MODE" != "user" ]; then
    repos=(
      ${repos[*]}
      ${nrp_dev[*]}
    )
  fi

  for repo in "${repos[@]}"
  do
    echo
    echo -------------------------
    echo $repo
    echo -------------------------
    sleep 2
    pushd "$repo" > /dev/null 2>&1 || { echo NOT FOUND. You might want to run the clone-all-repos script to get this repo; exit 1; }

    # in case there are unstaged changes we prompt the user to stash them
    if git status --short | grep -v "??" > /dev/null 2>&1
    then
      echo >&2 "About to checkout the $rebase_branch branch, you have the following unstaged changes:"
      git status --short | grep -v "??" >&2
      echo "Would you like to stash your changes [y] or you would like to abort?"
      read -p "[Y/n] " -n 1 -r REPLY || { echo ERROR; exit 1; }
      if [[ ( -z "$REPLY" ) || ( $REPLY =~ ^[Yy] ) ]]; then
        git stash || { echo ERROR; exit 1; }
      else
        echo
        echo "Could not continue script execution since you have unstaged changes."
        echo ERROR; exit 1;
      fi
    fi

    if ! git checkout "$rebase_branch"
    then
      git checkout master || { echo ERROR; exit 1; }
    fi

    git pull --rebase || { echo ERROR; exit 1; }

    popd > /dev/null 2>&1
  done
}

function generate_low_resolution_pbr_textures {
  OLD_VIRTUAL_ENV="${VIRTUAL_ENV}"
  cd "$HBP"
  $VIRTUALENV_CMD lower_res || { echo ERROR; exit 1; }
  source lower_res/bin/activate
  $PIP_CMD install 'pip>=19' wheel --upgrade
  $PIP_CMD install pillow==4.3.0 future
  python "$HBP"/nrp-user-scripts/generatelowrespbr.py
  deactivate
  rm -rf lower_res
  export VIRTUAL_ENV="${OLD_VIRTUAL_ENV}"
}

function process_models {
  echo
  echo -------------------------
  echo Models
  echo -------------------------
  sleep 2
  echo "Generate low resolution PBR textures"
  generate_low_resolution_pbr_textures || { echo ERROR; exit 1; }
  echo "Create symlinks"
  if [ ! -d "$HOME/.gazebo/models" ]; then
   mkdir -p "$HOME"/.gazebo/models || { echo ERROR; exit 1;}
  fi
  cd "$HBP"/Models || { echo NOT FOUND. You might want to run the clone-all-repos script to get this repo; exit 1; }

  ./create-symlinks.sh || { echo ERROR; exit 1; }

  echo
  echo "Copying the models from Models to nrpStorage/TEMPLATE_MODELS"
  # to be run before "npm run $HBP/nrpProxyBackend/update_template_models" (see nrpProxyBackend build)
  ./copy-to-storage.sh || { echo ERROR; exit 1; }
  }

#function backup_storage() {
#  # Get the NRP version using the git tag of one of main repositories (in this case CLE)
#  pushd "$HBP"/CLE >/dev/null || { echo ERROR; exit 1; }
#  nrp_version=$(git describe --abbrev=0 --tags)
#  popd >/dev/null || { echo ERROR; exit 1; }
#  if [ "$nrp_version" == "3.1.0" ]
#  then
#    read -t 5 -p "You are upgrading from 3.1.0. It is suggested to create a backup of your nrpStorage first. Would you like to create it? [n/Y] " -n 1 -r REPLY
#    echo
#    if [[ ( -z "$REPLY" ) || ( $REPLY =~ ^[Yy] ) ]]; then
#      # Create Zip file of nrpStorage folder
#      pushd "$STORAGE_PATH" >/dev/null || { echo ERROR; exit 1; }
#      if ls ../*.bak.zip 1> /dev/null 2>&1
#      then
#        echo "Already backed up. continue.. "
#      else
#        my_date=$(date +%d.%m.%y-%H:%I)
#        back_name=NRP_STORAGE_"$my_date".bak.zip
#        zip -r  ../"$back_name" ./* 1> /dev/null 2>&1
#        echo "$back_name was created in $(dirname "$STORAGE_PATH")"
#      fi
#      popd >/dev/null || { echo ERROR; exit 1; }
#    fi
#  fi
#}

function nrp_build {
  echo
  echo =========================
  echo Building
  echo =========================

  source "$HBP"/nrp-user-scripts/repos.txt || { echo ERROR; exit 1; }
#  backup_storage

  #process_models  # to be run before nrpProxyBackend build

  for python_repo in "${nrp_python[@]}"; do
    echo
    echo -------------------------
    echo "$python_repo"
    echo -------------------------
    sleep 2
    cd "$HBP"/"$python_repo" || { echo NOT FOUND. You might want to run the clone-all-repos script to get this repo; exit 1; }
    make devinstall || { echo "$python_repo" BUILD ERROR; exit 1; }
  done

  for js_repo in "${nrp_js[@]}"; do
    echo
    echo -----------------------
    echo "$js_repo"
    echo -----------------------
    sleep 2
    cd "$HBP"/"$js_repo" || { echo ERROR; exit 1; }

    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
    if [ "$js_repo" == "nrp-proxy" ]; then
      nvm use 8
    else
      nvm use 14
    fi

    git checkout -- package.json
    if [ "$js_repo" == "nrp-frontend" ]; then
      npm ci || { echo "$js_repo" INSTALL ERROR; exit 1; }
      npm run-script build || { echo REACT BUILD FAILED; exit 1; } # TODO nrp-frontend
    else
      # Dedupe helps prevents known issue "npm ERR! enoent ENOENT: no such file or directory, rename"
      # For more information see: https://github.com/zurb/foundation-sites/issues/10826
      npm dedupe || { echo "$js_repo" INSTALL ERROR; exit 1; }
      npm install --no-save || { echo "$js_repo" INSTALL ERROR; exit 1; }
    fi
    # if [ "$js_repo" == "nrp-proxy" ]; then
    #   npm run update_template_models # to be run after $HBP/Models/copy-to-storage.sh (see process_models)
    #   npm run refactor_storage
    # fi
    unset VENV_CMD
  done

  #build_gzweb
}

function nrp_configure {
  echo
  echo "Would you like to run configure_nrp right away to update the config files?"
  read -t 5 -p "Note that this will backup your local config files with then .bak extension. [Y/n] " -n 1 -r REPLY
  echo
  if [[ ( -z "$REPLY" ) || ( $REPLY =~ ^[Yy] ) ]]; then
    "$HBP"/nrp-user-scripts/configure_nrp || { echo ERROR; exit 1; }
  fi
}

function set_up_tingoDB {
  #check if the STORAGE_PATH is set, if not we use the default ~/.opt/nrpStorage
  if [ -z ${STORAGE_PATH+x} ];
   then echo "STORAGE_PATH is unset. Defaulting to ~/.opt/nrpStorage"
     STORAGE_PATH=~/.opt/nrpStorage
   else echo "STORAGE_PATH is set to '$STORAGE_PATH'"
  fi
  #check if the storage path exists
  if [ ! -d "$STORAGE_PATH" ]; then
   mkdir -p $STORAGE_PATH || { echo ERROR; exit 1;}
  fi
  cd "$HBP"/nrp-proxy || { echo NOT FOUND. You might want to run the clone-all-repos script to get this repo; exit 1; }
  node_modules/ts-node/dist/bin.js "$HBP"/nrp-proxy/utils/createFSUser.ts --user nrpuser --password password || { echo ERROR; exit 1; }
}

function add_new_user_tingoDB {
  while getopts ":u:p:s" opt; do
    case $opt in
      u) username="$OPTARG"
      ;;
      p) password="$OPTARG"
      ;;
      s) prompt=false
      ;;
      \?) echo "Invalid option -$OPTARG" >&2
      ;;
    esac
  done
  #check if the STORAGE_PATH is set, if not we use the default ~/.opt/nrpStorage
  echo
  echo "Welcome to the interactive nrp storage database user creation"
  echo
  if [ -z ${STORAGE_PATH+x} ];
   then echo "STORAGE_PATH is unset. Defaulting to ~/.opt/nrpStorage"
     STORAGE_PATH=~/.opt/nrpStorage
   else echo "STORAGE_PATH is set to '$STORAGE_PATH'"
  fi
  #check if the storage path exists
  if [ ! -d "$STORAGE_PATH" ]; then
   mkdir $STORAGE_PATH || { echo ERROR; exit 1;}
  fi
  if [ -z "$username" ]; then
    echo "Type the username and press [ENTER]"
    read -r username || { echo ERROR; exit 1; }
    echo
  fi
  if [ -z "$password" ]; then
    echo "Type the password and press [ENTER]"
    read -s password || { echo ERROR; exit 1; }
    echo
  fi
  if [ "$prompt" = true ]; then
    echo "Are you finished with your input? (Answering no will abort)"
    read -p "[Y/n] " -n 1 -r REPLY || { echo ERROR; exit 1; }
    echo
    if [[ ( $REPLY =~ ^[Nn] ) ]]; then
      exit 0
    fi
  fi
  pushd "$HBP"/nrp-proxy >/dev/null || { echo ERROR; exit 1; }
  node_modules/ts-node/dist/bin.js "$HBP"/nrp-proxy/utils/createFSUser.ts --user "$username" --password "$password" || { echo ERROR; exit 1; }
  popd >/dev/null || { echo ERROR; exit 1; }
}
