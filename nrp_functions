#!/bin/bash
# This script holds common functions

if [ -z "$NRP_NUM_MAKE_PROCESSES" ]; then
printf "\033[1;31m+-------------------------- Neurorobotics Platform warning ---------------------------+\n"
printf "| Dear Neurorobotics user, your NRP_NUM_MAKE_PROCESSES is not defined.                |\n"
printf "| This could mean you forgot to source the nrp_variables script before sourcing $0.   |\n"
printf "| NRP_NUM_MAKE_PROCESSES will be set to the number of cores of your CPU by default.   |\n"
printf "+-------------------------------------------------------------------------------------+\033[0m\n"
export NRP_NUM_MAKE_PROCESSES=`nproc`
fi

ubuntu_18_version=`lsb_release -rs | grep 18` >> /dev/null
if ! echo $ubuntu_18_version; then
printf "\033[1;31m+-------------------------- Neurorobotics Platform warning ----------------------------+\n"
printf "| Dear Neurorobotics user, you are currently on Ubuntu 16 or older                     |\n"
printf "| We recommend that you upgrade your ubuntu version to 18 which is fully supported in  |\n"
printf "| the NRP.                                                                             |\n"
printf "+--------------------------------------------------------------------------------------+\033[0m\n"
fi

function print_build_error_message {
printf "\033[1;31m+-------------------------- $1 build FAILED -------------------------------------+\n"
printf "| The build process failed, try removing the $1/build folder and relaunch this   |\n"
printf "| script                                                                              |\n"
printf "+-------------------------------------------------------------------------------------+\033[0m\n"
}

function checkssh {
    echo "Checking $1"
    touch "$touchfilebase""$1"
    ssh -o 'BatchMode yes' -o 'StrictHostKeyChecking no' -K root@$1 2>"$touchfilebase""$1" 1>/dev/null /bin/uname
    offends=`grep "Offending" "$touchfilebase""$1"`
    if [ -n "$offends" ]
    then
      echo "yes" > $2
      echo
      echo ------------------------------------------------------------
      echo $1
      echo "$offends"
#      cat "$touchfilebase""$1"
      echo ------------------------------------------------------------
    fi
    rm "$touchfilebase""$1"
}

function waitforall {
  finished="NOT"
  while [ -n "$finished" ]
  do
    sleep 5
    finished=`ls "$touchfilebase"* 2>/dev/null`
    touchbase=`basename $touchfilebase`
    replacelist=`echo "$finished" | sed 's/^.*'$touchbase'\(.*\)/\1/' | xargs`
    if [ -n "$replacelist" ]
    then
      echo "Still "$1": "$replacelist
    fi
  done
}

function build_nest {
  option=$1
  echo
  echo -------------------------
  echo Nest
  echo -------------------------
  echo
  # Install MUSIC related code if the option "spiking-cerebellum" is specified
  if [[ "$option" == "spiking-cerebellum" ]]; then
    echo
    echo "* Building NEST with MUSIC support"
    echo ----------------------------------
  fi
  sleep 2
  cd $HBP/nest-simulator || { echo ERROR: $HBP/nest-simulator NOT FOUND; exit 1; }
  ( # use a subshell to avoid "nested" virtualenv issues
    virtualenv build_venv || { echo ERROR; exit 1; }
    source build_venv/bin/activate
    pip install Cython==0.23.4 mpi4py==2.0.0 || { echo ERROR; exit 1; }
    xargs rm -rf < $HBP/user-scripts/nest-delete-filelist.txt || { echo ERROR; exit 1; }
    if [ ! -d $HBP/nest-simulator/build ]; then
      mkdir $HBP/nest-simulator/build || { echo ERROR; exit 1;}
    fi
    cd $HBP/nest-simulator/build || { echo ERROR: $HBP/nest-simulator/build NOT FOUND; exit 1;}
    cmake_args="-DCMAKE_INSTALL_PREFIX:PATH=${HOME}/.local -Dwith-gsl=ON -Dwith-mpi=ON"

    if [[ $option == "spiking-cerebellum" ]]; then
      cmake_args="${cmake_args} -Dwith-music=ON"
    fi
    cmake $cmake_args .. || { echo CMAKE ERROR; print_build_error_message nest-simulator; exit 1; }
    make -j$NRP_NUM_MAKE_PROCESSES || { echo nest-simulator; print_build_error_message nest-simulator; exit 1; }
    make install || { echo NEST: INSTALL ERROR; exit 1; }

    # Optional: install UGR's Cerebellum model plugin
    # It requires NEST to be built with MUSIC support
    if [[ $option == "spiking-cerebellum" ]]; then
      echo
      echo -------------------------
      echo Nest: SpikingCerebellum
      echo -------------------------
      echo
      cd $HBP/nest-simulator/SpikingCerebellum/src/CerebellumModule
      mkdir -p build && cd build && cmake .. && make && make install
      cd ../../../../build/ || { echo ERROR; exit 1; }
      cmake -DCMAKE_INSTALL_PREFIX:PATH=$HOME/.local \
          -Dwith-gsl=ON -Dwith-mpi=ON -Dwith-music=ON -Dexternal-modules=cerebellum \
          .. || { echo CMAKE spiking-cerebellum; print_build_error_message nest-simulator; exit 1; }
      make -j$NRP_NUM_MAKE_PROCESSES || { echo spiking-cerebellum; print_build_error_message nest-simulator; exit 1; }
      make install || { echo NEST-SPIKING-CEREBELLUM: INSTALL ERROR; exit 1; }
    fi

    deactivate
  ) || { exit 1; }
  rm -rf build_venv || { echo ERROR; exit 1; }
}

function build_music {
  echo
  echo -------------------------
  echo MUSIC
  echo -------------------------
  sleep 2
  cd $HBP/MUSIC
  ln -sf $HOME/.local/bin/mpichversion mpich2version
  old_path=$PATH
  export PATH=$PATH:$HBP/MUSIC
  export LDFLAGS+=" -pthread"
  ( # use a subshell to avoid "nested" virtualenv issues
    virtualenv build_venv || { echo ERROR; exit 1; }
    source build_venv/bin/activate
    pip install Cython==0.23.4 mpi4py==2.0.0 || { echo CYTHON_MI4PY INSTALL ERROR; exit 1; }
    deactivate
  ) || { exit 1; }
  PYTHONPATH=$HBP/MUSIC/build_venv/lib/python2.7/site-packages:$PYTHONPATH
  ./autogen.sh || { echo ERROR; exit 1; }
  autoreconf --force --install
  ./configure --prefix=$HOME/.local MPI_CXX=mpicxx || { echo ERROR; exit 1; }
  make -j$NRP_NUM_MAKE_PROCESSES || { echo music; print_build_error_message MUSIC; exit 1; }
  make install || { echo MUSIC INSTALL ERROR; exit 1; }
  rm -rf build_venv || { echo ERROR; exit 1; }
  rm mpich2version || { echo ERROR; exit 1; }
  export PATH=$old_path
  old_path=
  export LDFLAGS=
}

function clean_old_mvapich2_installation {
  if [ -d "$HBP/mvapich2" ]; then
    echo
    echo -------------------------
    echo Removing previous mvapich2 installation
    echo -------------------------
    echo
    cd $HBP/mvapich2 || { echo ERROR; exit 1; }
    #make uninstall || { echo ERROR: Could not uninstall mvapich2 properly, please uninstall manually and rerun this script; exit 1; }
    #make clean || { echo ERROR: Could not clean the build files. Please clean manually; exit 1; }
    #make distclean || { echo ERROR: Could not clean the configure files. Please distclean manually; exit 1; }
    cd .. && mv -f $HBP/mvapich2 $HBP/mvapich2.`date +%Y-%m-%d` || { echo ERROR: Could not rename mvapich2 folder, please remove it manually; exit 1; }
    ls $HOME/.local/lib/libmpi* 1>/dev/null 2>&1 && { echo ERROR: There seems to be MPI leftovers in your ~/.local. Please remove them manually before rerunning this script; exit 1; }
    ls $HOME/.local/include/*mpi* 1>/dev/null 2>&1 && { echo ERROR: There seems to be MPI leftovers in your ~/.local. Please remove them manually before rerunning this script; exit 1; }
    cd $HBP/nest-simulator/build || { echo ERROR: $HBP/nest-simulator/build not found; exit 1; }
    make clean  # option step, no need to error here
    cd $HBP/nest-simulator
    rm -rf build || { echo ERROR: could not remove $HBP/nest-simulator/build. Please do so manually.; exit 1; }
  fi
}

function build_mpich {
  # install standard mpich distribution
  echo
  echo -------------------------
  echo mpich
  echo -------------------------
  echo
  cd $HBP
  if [ ! -d "mpich-3.1.4" ]; then
    wget -q http://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz || { echo ERROR downloading mpich source; exit 1; }
    tar xf mpich-3.1.4.tar.gz || { echo ERROR unzipping mpich source archive; exit 1; }
    rm mpich-3.1.4.tar.gz || { echo ERROR deleting mpich source archive, ignoring; }
  fi
  cd mpich-3.1.4 || { echo ERROR accessing mpich-3.1.4 directory; exit 1; }
  ./configure --enable-fast=all,O3 --prefix=$HOME/.local || { echo ERROR configuring mpich build; exit 1; }
  make -j$NRP_NUM_MAKE_PROCESSES || { echo mpich; print_build_error_message mpich; exit 1; }
  make install || { echo ERROR installing mpich in $HOME/.local; exit 1; }
}

function build_gazebo {
  echo
  echo -------------------------
  echo Gazebo
  echo -------------------------
  sleep 2
  cd $HBP/gazebo || { echo ERROR: $HBP/gazebo NOT FOUND; exit 1; }
  mkdir -p build
  cd build
  cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local .. || { echo gazebo; print_build_error_message gazebo; exit 1; }
  make -j$NRP_NUM_MAKE_PROCESSES || { echo gazebo; print_build_error_message gazebo; exit 1; }
  make install || { echo GAZEBO INSTALL ERROR; exit 1; }
}

function build_gazebo_ros_packages {
  echo
  echo -------------------------
  echo GazeboRosPackages
  echo -------------------------
  sleep 2
  cd $HBP/GazeboRosPackages || { echo ERROR: $HBP/GazeboRosPackages NOT FOUND; exit 1; }
  rm -rf build
  catkin_make || { echo GAZEBO_ROSPACKAGES BUILD ERROR; exit 1; }
  cd $HBP
}

function build_gzweb {
  echo
  echo -------------------------
  echo gzweb
  echo -------------------------
  sleep 2
  cd $HBP/gzweb || { echo ERROR: $HBP/gzweb NOT FOUND ; exit 1; }
  ./deploy-gzbridge-nrp.sh || { echo GZBRIDGE BUILD ERROR; exit 1; }
  # Dedupe helps prevents known issue "npm ERR! enoent ENOENT: no such file or directory, rename"
  # For more information see: https://github.com/zurb/foundation-sites/issues/10826
  npm dedupe || { echo  GZWEB INSTALL ERROR; exit 1; }
  git checkout -- package.json
  npm install --no-save || { echo GZBRIDGE INSTALL ERROR; exit 1; }
  cd gz3d/utils || { echo gz3d/utils ERROR: DIRECTORY NOT FOUND; exit 1; }
  npm dedupe || { echo  GZ3D INSTALL ERROR; exit 1; }
  git checkout -- package.json
  npm install --no-save || { echo GZ3D INSTALL ERROR; exit 1; }
}

function nest_version_switch {
  source $HBP/nest-simulator/hbp/version
  if [[ "$BUILD_VERSION" =~ ^2\.10.*hbp.* ]]
  then
    echo
    echo =========================
    echo Cleaning up Nest 2.10
    echo =========================
    cd $HBP/nest-simulator || { echo ERROR; exit 1; }
    make clean >/dev/null 2>&1
    make distclean >/dev/null 2>&1
    rm -rf build_venv
  fi
  sleep 2
}

function nrp_rebase {
  rebase_all=$1
  rebase_branch=$2

  if [ "$rebase_all" == "all" ];then nest_version_switch;fi

  cd $HBP || { echo ERROR; exit 1; }
  source $HBP/user-scripts/repos.txt || { echo ERROR; exit 1; }

  echo
  echo =========================
  echo Rebasing repos
  echo =========================
  if [ "$rebase_all" = "all" ]
  then
    repos=(
    ${nrp_3rd_party[*]}
    ${nrp_repos[*]}
  )
  else
    repos=(
      ${nrp_repos[*]}
    )
  fi
  for i in ${repos[@]}
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR; exit 1; }

    # if users (u16 or u18) dont have the master18 branch, get it
    if [ "$NRP_INSTALL_MODE" == "user" ]; then
      if ! [ "`git branch --list master18`" ]; then
        git config remote.origin.fetch "+refs/heads/master*:refs/remotes/origin/master*" || { echo ERROR; exit 1; }
        git pull || { echo ERROR; exit 1; }
      fi
    fi

    # in case there are unstaged changes we prompt the user to stash them
    if git status --short | grep -v "??" > /dev/null 2>&1
    then
      echo >&2 "About to checkout the $branch branch, you have the following unstaged changes:"
      git status --short | grep -v "??" >&2
      echo "Would you like to stash your changes [y] or you would like to abort?"
      read -p "[Y/n] " -n 1 -r REPLY || { echo ERROR; exit 1; }
      if [[ ( -z "$REPLY" ) || ( $REPLY =~ ^[Yy] ) ]]; then
        git stash || { echo ERROR; exit 1; }
      else
        echo
        echo "Could not continue script execution since you have unstaged changes."
        echo ERROR; exit 1;
      fi
    fi

    git checkout $branch && git pull --rebase || { echo ERROR; exit 1; }
    cd ..
  done
}

function ubuntu_fix_cv2 {

  # This imports cv2 to the platform_venv on ubuntu. Use this script on local installations only.
  # You should have installed python-opencv via apt-get
  echo
  echo -------------------------------------
  echo "Applying patch for OpenCv on Ubuntu"
  echo -------------------------------------
  echo
  mkdir ${NRP_VIRTUAL_ENV}/lib/python2.7/site-packages/ -p || { echo ERROR; exit 1; }
  cp /usr/lib/python2.7/dist-packages/cv2*.so ${NRP_VIRTUAL_ENV}/lib/python2.7/site-packages/ || { echo ERROR; exit 1; }
  cp /usr/lib/python2.7/dist-packages/cv.py ${NRP_VIRTUAL_ENV}/lib/python2.7/site-packages/ || { echo ERROR; exit 1; }

}

function install_template_experiments_requirements {
  echo
  echo -------------------------
  echo Experiments
  echo -------------------------
  sleep 2
  echo "Install Experiments'requirements"
  source ${NRP_VIRTUAL_ENV}/bin/activate || { echo ERROR; exit 1; } # pip installation is done inside ${NRP_VIRTUAL_ENV}
  requirements=$HBP/Experiments/template_requirements.txt # TODO(Luc) create $HBP/Experiments/templates and use a requirements.txt file per each template experiment
  pip install -r ${requirements} || { echo EXPERIMENTS: PIP INSTALL ERROR; exit 1; }
  deactivate
}

function generate_low_resolution_pbr_textures {
  cd $HBP
  virtualenv lower_res
  source lower_res/bin/activate
  pip install pillow==4.3.0
  python $HBP/user-scripts/generatelowrespbr.py
  deactivate
  rm -rf lower_res
}

function process_models {
  echo
  echo -------------------------
  echo Models
  echo -------------------------
  sleep 2
  echo "Generate low resolution PBR textures"
  generate_low_resolution_pbr_textures || { echo ERROR; exit 1; }
  echo "Create symlinks"
  if [ ! -d "$HOME/.gazebo/models" ]; then
   mkdir -p $HOME/.gazebo/models || { echo ERROR; exit 1;}
  fi
  cd $HBP/Models || { echo ERROR; exit 1; }
  ./create-symlinks.sh || { echo ERROR; exit 1; }
}


function nrp_build {
  build_all=$1
  spiking_cerebellum_option=$2

  echo
  echo =========================
  echo Building
  echo =========================
  if [ "$build_all" = "all" ]; then
    for i in simbody opensim sdformat
    do
      echo
      echo -------------------------
      echo $i
      echo -------------------------
      sleep 2
      cd $HBP/$i || { echo ERROR: $HBP/$i NOT FOUND ; exit 1; }
      mkdir -p build
      cd build
      cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local .. || { echo $i: CMAKE ERROR; print_build_error_message nest-simulator; exit 1; }
      make -j$NRP_NUM_MAKE_PROCESSES || { echo $i; print_build_error_message $i; exit 1; }
      make install || { echo $i: INSTALL ERROR; exit 1; }
    done

    build_gazebo
    clean_old_mvapich2_installation
    build_mpich
    if [[ "${spiking_cerebellum_option}" == "spiking-cerebellum" ]]; then
      # MUSIC is required in order to compile SpikingCerebellum
      build_music
    fi
    build_nest ${spiking_cerebellum_option}
  fi

  build_gazebo_ros_packages

  for i in ExperimentControl BrainSimulation VirtualCoach CLE ExDBackend
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $HBP/$i || { echo ERROR; exit 1; }
    make devinstall || { echo $i BUILD ERROR; exit 1; }
  done

  # Only perform this step for Ubuntu16
  if echo "$ubuntu_version" | grep 16 >> /dev/null; then
    ubuntu_fix_cv2
  fi
 
  for i in brainvisualizer ExDFrontend nrpBackendProxy SlurmClusterMonitor
  do
    echo
    echo -----------------------
    echo $i
    echo -----------------------
    sleep 2
    cd $HBP/$i || { echo ERROR; exit 1; }

    # Dedupe helps prevents known issue "npm ERR! enoent ENOENT: no such file or directory, rename"
    # For more information see: https://github.com/zurb/foundation-sites/issues/10826
    npm dedupe || { echo  $i INSTALL ERROR; exit 1; }
    git checkout -- package.json
    npm install --no-save || { echo  $i INSTALL ERROR; exit 1; }
    if [ "$i" == "ExDFrontend" ]; then
        grunt build || { echo GRUNT BUILD FAILED; exit 1; }
    fi
  done

  build_gzweb
  process_models
  install_template_experiments_requirements
}

function nrp_configure {
  echo
  echo "Would you like to run configure_nrp right away to update the config files?"
  read -t 5 -p "Note that this will backup your local config files with then .bak extension. [Y/n] " -n 1 -r REPLY
  echo
  if [[ ( -z "$REPLY" ) || ( $REPLY =~ ^[Yy] ) ]]; then
    $HBP/user-scripts/configure_nrp || { echo ERROR; exit 1; }
  fi
}

function clean_branches {
  clean_all=$1

  cd $HBP || { echo ERROR: $HBP NOT FOUND; exit 1; }
  source $HBP/user-scripts/repos.txt || { echo ERROR; exit 1; }

  echo
  echo =========================
  echo Cleaning up branches
  echo =========================
  if [ "$clean_all" = "all" ]
  then
    repos=(
    ${nrp_3rd_party[*]}
    ${nrp_repos[*]}
  )
  else
    repos=(
      ${nrp_repos[*]}
    )
  fi
  for i in ${repos[@]}
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR; exit 1; }
    git branch | grep -v "master" | grep -v "development" | grep -v "master16" | xargs git branch -D 2>/dev/null
    cd ..
  done
}

function it_branch {
  itbranch_all=$1

  cd $HBP || { echo ERROR; exit 1; }
  source $HBP/user-scripts/repos.txt || { echo ERROR; exit 1; }

  echo
  echo =========================
  echo Creating clean IT branch
  echo =========================
  if [ "$itbranch_all" = "all" ]
  then
    repos=(
    ${nrp_3rd_party[*]}
    ${nrp_repos[*]}
  )
  else
    repos=(
      ${nrp_repos[*]}
    )
  fi
  for i in ${repos[@]}
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR; exit 1; }
    { git branch | grep "^ *IT$" && git branch -D IT || true; } && git checkout -b IT || { echo ERROR; exit 1; }
    cd ..
  done
}

function merge_dev {

  cd $HBP || { echo ERROR; exit 1; }
  source $HBP/user-scripts/repos.txt || { echo ERROR; exit 1; }

  echo
  echo ===============================
  echo Merging development on master18
  echo ===============================
  repos=(
  ${nrp_3rd_party[*]}
  ${nrp_repos[*]}
  )

  for i in ${repos[@]}
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR; exit 1; }
    git checkout development || { echo ERROR; exit 1; }
    git pull --rebase || { echo ERROR; exit 1; }
    git checkout master18 || { echo ERROR; exit 1; }
    git pull --rebase || { echo ERROR; exit 1; }
    git merge development || { echo ERROR; exit 1; }
    git push || { echo ERROR; exit 1; }
    gitk
    cd ..
  done
}

function set_up_tingoDB {
  #check if the STORAGE_PATH is set, if not we use the default ~/.opt/nrpStorage
  if [ -z ${STORAGE_PATH+x} ];
   then echo "STORAGE_PATH is unset. Defaulting to ~/.opt/nrpStorage"
     STORAGE_PATH=~/.opt/nrpStorage
   else echo "STORAGE_PATH is set to '$STORAGE_PATH'"
  fi
  #check if the storage path exists
  if [ ! -d "$STORAGE_PATH" ]; then
   mkdir -p $STORAGE_PATH || { echo ERROR; exit 1;}
  fi
  cd $HBP/nrpBackendProxy || { echo ERROR; exit 1; }
  node_modules/ts-node/dist/bin.js $HBP/nrpBackendProxy/utils/createFSUser.ts --user nrpuser --password password || { echo ERROR; exit 1; }
}

function add_new_user_tingoDB {
  while getopts ":u:p:s" opt; do
    case $opt in
      u) username="$OPTARG"
      ;;
      p) password="$OPTARG"
      ;;
      s) prompt=false
      ;;
      \?) echo "Invalid option -$OPTARG" >&2
      ;;
    esac
  done
  #check if the STORAGE_PATH is set, if not we use the default ~/.opt/nrpStorage
  echo
  echo "Welcome to the interactive nrp storage database user creation"
  echo
  if [ -z ${STORAGE_PATH+x} ];
   then echo "STORAGE_PATH is unset. Defaulting to ~/.opt/nrpStorage"
     STORAGE_PATH=~/.opt/nrpStorage
   else echo "STORAGE_PATH is set to '$STORAGE_PATH'"
  fi
  #check if the storage path exists
  if [ ! -d "$STORAGE_PATH" ]; then
   mkdir $STORAGE_PATH || { echo ERROR; exit 1;}
  fi
  if [ -z "$username" ]; then
    echo "Type the username and press [ENTER]"
    read username || { echo ERROR; exit 1; }
    echo
  fi
  if [ -z "$password" ]; then
    echo "Type the password and press [ENTER]"
    read -s password || { echo ERROR; exit 1; }
    echo
  fi
  if [ "$prompt" = true ]; then
    echo "Are you finished with your input? (Answering no will abort)"
    read -p "[Y/n] " -n 1 -r REPLY || { echo ERROR; exit 1; }
    echo
    if [[( $REPLY =~ ^[Nn] ) ]]; then
      exit 0
    fi
  fi
  pushd $HBP/nrpBackendProxy >/dev/null || { echo ERROR; exit 1; } 
  node_modules/ts-node/dist/bin.js $HBP/nrpBackendProxy/utils/createFSUser.ts --user $username --password $password || { echo ERROR; exit 1; }
  popd >/dev/null || { echo ERROR; exit 1; }
}
