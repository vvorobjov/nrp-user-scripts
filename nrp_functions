#!/bin/bash
# This script holds common functions

function checkssh {
    echo "Checking $1"
    touch "$touchfilebase""$1"
    ssh -o 'BatchMode yes' -o 'StrictHostKeyChecking no' -K root@$1 2>"$touchfilebase""$1" 1>/dev/null /bin/uname
    offends=`grep "Offending" "$touchfilebase""$1"`
    if [ -n "$offends" ]
    then
      echo "yes" > $2
      echo
      echo ------------------------------------------------------------
      echo $1
      echo "$offends"
#      cat "$touchfilebase""$1"
      echo ------------------------------------------------------------
    fi
    rm "$touchfilebase""$1"
}

function waitforall {
  finished="NOT"
  while [ -n "$finished" ]
  do
    sleep 5
    finished=`ls "$touchfilebase"* 2>/dev/null`
    touchbase=`basename $touchfilebase`
    replacelist=`echo "$finished" | sed 's/^.*'$touchbase'\(.*\)/\1/' | xargs`
    if [ -n "$replacelist" ]
    then
      echo "Still "$1": "$replacelist
    fi
  done
}

function nrp_rebase {
  rebase_all=$1

  cd $HBP || { echo ERROR;exit 1; }
  source $HBP/user-scripts/repos.txt || { echo ERROR;exit 1; }

  echo
  echo =========================
  echo Rebasing repos
  echo =========================
  if [ "$rebase_all" = "all" ]
  then
    repos=(
    ${nrp_3rd_party[*]}
    ${nrp_repos[*]}
    user-scripts
  )
  else
    repos=(
      ${nrp_repos[*]}
      user-scripts
    )
  fi
  for i in ${repos[@]}
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR;exit 1; }
    git checkout master && git pull --rebase || { echo ERROR;exit 1; }
    cd ..
  done
}

function nrp_build {
  build_all=$1

  echo
  echo =========================
  echo Building
  echo =========================
  isvpn=$(curl https://bbpteam.epfl.ch/repository/devpi/bbprelman/dev/+simple/pip 2>/dev/null | grep 1.4.1);
  test -n "$isvpn" || { echo ERROR you should be on the EPFL vpn;exit 1; }

  if [ "$build_all" = "all" ]
  then
    for i in simbody opensim sdformat bulletphysics gazebo
    do
      echo
      echo -------------------------
      echo $i
      echo -------------------------
      sleep 2
      if [ "$i" == "gazebo" ]; then cmake_args="-DENABLE_TESTS_COMPILATION:BOOL=False"; else cmake_args=;fi
      cd $HBP/$i || { echo ERROR;exit 1; }
      mkdir -p build
      cd build
      cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local $cmake_args .. || { echo ERROR;exit 1; }
      make -j`nproc` || { echo ERROR;exit 1; }
      make install || { echo ERROR;exit 1; }
    done

    echo
    echo -------------------------
    echo Mvapich2
    echo -------------------------
    sleep 2
    cd $HBP/mvapich2 || { echo ERROR;exit 1; }
    ./autogen.sh || { echo ERROR;exit 1; }
    ./configure --prefix=$HOME/.local --with-device=ch3:nemesis || { echo ERROR;exit 1; }
    make -j`nproc` || { echo ERROR;exit 1; }
    make install || { echo ERROR;exit 1; }

    echo
    echo -------------------------
    echo MUSIC
    echo -------------------------
    sleep 2
    cd $HBP/MUSIC
    ln -sf $HOME/.local/bin/mpichversion mpich2version
    old_path=$PATH
    export PATH=$PATH:$HBP/MUSIC
    export LDFLAGS+=" -pthread"
    virtualenv build_venv || { echo ERROR;exit 1; }
    source build_venv/bin/activate
    pip install Cython==0.23.4 mpi4py==2.0.0 || { echo ERROR;exit 1; }
    deactivate
    PYTHONPATH=$HBP/MUSIC/build_venv/lib/python2.7/site-packages:$PYTHONPATH
    ./autogen.sh || { echo ERROR;exit 1; }
    ./configure --prefix=$HOME/.local MPI_CXX=mpicxx || { echo ERROR;exit 1; }
    make -j`nproc` || { echo ERROR;exit 1; }
    make install || { echo ERROR;exit 1; }
    rm -rf build_venv || { echo ERROR;exit 1; }
    rm mpich2version || { echo ERROR;exit 1; }
    export PATH=$old_path
    old_path=
    export LDFLAGS=

    echo
    echo -------------------------
    echo Nest
    echo -------------------------
    sleep 2
    cd $HBP/nest-simulator || { echo ERROR;exit 1; }
    virtualenv build_venv || { echo ERROR;exit 1; }
    source build_venv/bin/activate
    pip install Cython==0.23.4 mpi4py==2.0.0 || { echo ERROR;exit 1; }
    deactivate
    PYTHONPATH=$HBP/nest-simulator/build_venv/lib/python2.7/site-packages:$PYTHONPATH
    ./bootstrap.sh || { echo ERROR;exit 1; }
    ./configure --prefix=$HOME/.local --with-gsl --with-mpi --with-music || { echo ERROR;exit 1; }
    make -j`nproc` || { echo ERROR;exit 1; }
    make install || { echo ERROR;exit 1; }
    rm -rf build_venv || { echo ERROR;exit 1; }
  fi

  cd $HBP || { echo ERROR;exit 1; }

  echo
  echo -------------------------
  echo GazeboRosPackages
  echo -------------------------
  sleep 2
  cd GazeboRosPackages || { echo ERROR;exit 1; }
  catkin_make || { echo ERROR;exit 1; }
  cd ..

  for i in ExperimentControl BrainSimulation VirtualCoach CLE ExDBackend
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR;exit 1; }
    make devinstall || { echo ERROR;exit 1; }
    cd ..
  done

  for i in brainvisualizer ExDFrontend nrpBackendProxy
  do
    echo
    echo -----------------------
    echo $i
    echo -----------------------
    sleep 2
    cd $i || { echo ERROR;exit 1; }
    npm install || { echo ERROR;exit 1; }
    cd ..
  done

  echo
  echo -------------------------
  echo gzweb
  echo -------------------------
  sleep 2
  cd gzweb || { echo ERROR;exit 1; }
  ./deploy.sh || { echo ERROR;exit 1; }
  npm install || { echo ERROR;exit 1; }
  cd ..
}

function nrp_configure {
  echo
  echo "Would you like to run configure_nrp right away to update the config files?"
  read -p "Note that this will overwrite local changes in your config sample files. [y/N] " -n 1 -r REPLY 
  echo
  if [[ $REPLY =~ ^[Yy] ]]; then
    $HBP/user-scripts/configure_nrp || { echo ERROR;exit 1; }
  fi
}

function clean_branches {
  clean_all=$1

  cd $HBP || { echo ERROR;exit 1; }
  source $HBP/user-scripts/repos.txt || { echo ERROR;exit 1; }

  echo
  echo =========================
  echo Cleaning up branches
  echo =========================
  if [ "$clean_all" = "all" ]
  then
    repos=(
    ${nrp_3rd_party[*]}
    ${nrp_repos[*]}
    user-scripts
  )
  else
    repos=(
      ${nrp_repos[*]}
      user-scripts
    )
  fi
  for i in ${repos[@]}
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR;exit 1; }
    git branch | grep -v "master" | xargs git branch -D 2>/dev/null
    cd ..
  done
}

function it_branch {
  itbranch_all=$1

  cd $HBP || { echo ERROR;exit 1; }

  echo
  echo =========================
  echo Creating clean IT branch
  echo =========================
  if [ "$clean_all" = "all" ]
  then
    repos=(
    ${nrp_3rd_party[*]}
    ${nrp_repos[*]}
    user-scripts
  )
  else
    repos=(
      ${nrp_repos[*]}
      user-scripts
    )
  fi
  for i in ${repos[@]}
  do
    echo
    echo -------------------------
    echo $i
    echo -------------------------
    sleep 2
    cd $i || { echo ERROR;exit 1; }
    { git branch | grep "^ *IT$" && git branch -D IT || true; } && git checkout -b IT || { echo ERROR;exit 1; }
    cd ..
  done
}
