PYTHON_VERSION_MAJOR_MINOR=$(python -c "from sys import version_info as v_i; print('{}.{}'.format(v_i.major, v_i.minor))")
PYTHON_VERSION_MAJOR=$(python -c "import sys; print(sys.version_info.major)")

if [[ $PYTHON_VERSION_MAJOR -lt 3 ]]; then
    UWSGI_PLUGIN="python"
else
    UWSGI_PLUGIN="python3" 
fi

alias cle-backend='PYTHONPATH=$PYTHONPATH:$HOME/.opt/platform_venv/lib/python$PYTHON_VERSION_MAJOR_MINOR/site-packages && uwsgi --ini $HOME/.local/etc/nginx/uwsgi-nrp.ini --plugin $UWSGI_PLUGIN'
alias cle-backend-debug='PYTHONPATH=$PYTHONPATH:$HOME/.opt/platform_venv/lib/python$PYTHON_VERSION_MAJOR_MINOR/site-packages && export CLE_DEBUG=1 && uwsgi --ini $HOME/.local/etc/nginx/uwsgi-nrp.ini --plugin $UWSGI_PLUGIN'
alias cle-factory='$HOME/.opt/platform_venv/bin/python $HBP/ExDBackend/hbp_nrp_cleserver/hbp_nrp_cleserver/server/ROSCLESimulationFactory.py'
alias cle-factory-debug='$HOME/.opt/platform_venv/bin/python $HBP/ExDBackend/hbp_nrp_cleserver/hbp_nrp_cleserver/server/ROSCLESimulationFactory.py --vsdebug'
alias cle-rosbridge='rosrun rosbridge_server rosbridge_websocket'
alias cle-frontend='cd $HBP/ExDFrontend && grunt serve'
alias cle-nginx='$HOME/.local/etc/init.d/nginx restart'
alias cle-proxy='cd $HBP/nrpBackendProxy && npm start'
alias cle-rosvideo='rosrun web_video_server web_video_server _port:=8081'

cle-virtual-coach()
{
    # activate virtual environment
    source ~/.opt/platform_venv/bin/activate

    # usage information and examples for no arguments or -h flag
    if [ "$#" -eq 0 ]  || [ "$1" == "-h" ] ; then
        echo "Usage: cle-virtual-coach [-h] [args]"
        echo "       [-h] Print this usage information."
        echo "       [args] arguments to run in a VirtualCoach configured environment, e.g.:"
        echo "              cle-virtual-coach foo.py a b c -> launches foo.py with arguments"
        echo "              cle-virtual-coach jupyter notebook -> launches a jupyter notebook session"
        echo "              cle-virtual-coach python -> launches a python interpreter session"

    # user specified Python script, convenience to avoid the extra 'python' in arguments
    elif [[ "$1" == *\.py ]] ; then
        python $@

    # otherwise just run whatever command as provided
    else
        eval $@      # run any user commands with the modified PYTHONPATH
    fi

    # save the exit code for last executed command
    RES=$?

    # deactivate virtual environment
    deactivate

    # propagate the exit codes if needed above
    return $RES
}

cle_restart_backend()
{
  killlist=("python.*roscore"
            "python\\s.*rosmaster"
            "python\\s.*rosbridge"
            "lib/rosout/rosout"
            "${GZSERVER_BIN_DIR}/gzserver"
            "python\\s.*runserver\\.py"
            "python\\s.*ROSCLESimulationFactory\\.py"
            "python\\s.*StateMachineRunner\\.py"
            "python\\s.*BrainProcess"
            "python\\s.*CLELauncher"
            "node\\s.*ws_server\\.js"
            "web_video_server"
            "uwsgi")

  kill_hbp_processes "${killlist[@]}"

  roscore & sleep 1
  cle-rosvideo & sleep 1
  cle-factory & sleep 1
  cle-backend &
  cle-rosbridge &
}

kill_hbp_cle()
{
  killlist=("python.*roscore"
            "python\\s.*rosmaster"
            "python\\s.*rosbridge"
            "lib/rosout/rosout"
            "${GZSERVER_BIN_DIR}/gzserver"
            "python\\s.*runserver\\.py"
            "python\\s.*ROSCLESimulationFactory\\.py"
            "python\\s.*StateMachineRunner\\.py"
            "python\\s.*BrainProcess"
            "python\\s.*CLELauncher"
            "[0-9]+\\snode\\s.*\\sapp\\.ts$"
            "node\\s.*ws_server\\.js"
            "web_video_server"
            "uwsgi")

  kill_hbp_processes "${killlist[@]}"
}

kill_single_hbp_process()
{
    pgid=$1
    for level in INT TERM KILL
    do
        ps -eo pgid | grep -qwE "^\\s*$pgid" || break
        echo "    sending: $level"
        kill -$level -$pgid
        sleep 1
    done
}

kill_hbp_processes()
{
    declare -a killlist=("${@}")

    # find the unique process groups for any matches, this will ensure all
    # spawned subprocesses are also cleanly killed
    # tip: use http:/explainshell.com to understand the entire command expansion
    pgids=($(ps -eo pgid,cmd |
             grep -E "$(IFS=$'|'; echo "${killlist[*]}")" |
             grep -v grep |
             sed -e 's/^\s*//' |
             cut -d ' ' -f1 |
             sort -ru |
             tr '\n' ' '))

    # loop through and try to kill all of the process groups
    echo "Found ${#pgids[@]} NRP process groups to terminate."
    for pgid in "${pgids[@]}"
    do
        # print the remaining processes under this process group
        echo
        echo "$(ps -eo pgid,cmd | grep -E "^\\s*$pgid" | grep -vE "bash|grep" | sed 's/^/  /')"

        kill_single_hbp_process $pgid &
    done
    wait

    # force clean NRP gzserver and gzbridge lock files (required for next clean start/launch)
    rm -f $HOME/.gazebo/gzserver.lock
    rm -f $HBP/gzweb/gzbridge.lock

    # double check everything is killed, this is mostly to ensure a cle-kill
    # during a startup or process spawning is as successful as we can make it
    if [[ ${#pgids[@]} -gt 0 ]]
    then
        kill_hbp_processes "${killlist[@]}"
    fi
}

alias cle-start='export VIRTUAL_ENV=$NRP_VIRTUAL_ENV;roscore & sleep 1;cle-rosvideo & sleep 1;cle-factory & sleep 1;cle-backend & sleep 1; cle-proxy & cle-rosbridge'
alias cle-debug='export VIRTUAL_ENV=$NRP_VIRTUAL_ENV;roscore & sleep 1;cle-rosvideo & sleep 1;cle-factory-debug & sleep 1;cle-backend-debug & sleep 1; cle-proxy & cle-rosbridge'
alias cle-kill='kill_hbp_cle'
alias cle-postgres='pg_ctl -D $HOME/.local/postgres/data/ -l logfile restart'